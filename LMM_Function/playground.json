{"code":"/**\n * Global constants\n */\nconst EPOCH_EARLIEST = 1690211063; // 24 July\n\nconst EPOCH_LATEST = EPOCH_EARLIEST + 60*60*24*365*1; // 1 year\n\nconst QUERY_API_URL = 'https://1zyc2hqr0b.execute-api.ap-southeast-1.amazonaws.com/testing?';\n\nconst TABLE_SCHEMA_QUERY = `\nSELECT t.table_name, array_agg(c.column_name::text) AS columns \nFROM information_schema.tables t \nINNER JOIN information_schema.columns c ON t.table_name = c.table_name \nWHERE t.table_schema = 'public' AND t.table_type= 'BASE TABLE' AND c.table_schema = 'public' \nGROUP BY t.table_name\n`;\n\n/**\n * Get table schemas of a database\n * @param {String} hex Database name, a hex value. Given when user uploads the data file.\n */\nasync function getSchema(hex) {\n  const r = await fetch(QUERY_API_URL + new URLSearchParams({db_name: hex, query_str: TABLE_SCHEMA_QUERY}));\n  return await r.json();\n}\n\n/**\n * Run a SQL query against the Postgres remote server\n * @param {String} hex   Database name\n * @param {String} query Query string\n */\nasync function runQuery(hex, query) {\n  const r = await fetch(QUERY_API_URL + new URLSearchParams({db_name: hex, query_str: query}));\n  return await r.json()\n}\n\n/**\n * Runs every time user sends a message\n * @params {String}   payload Message\n * @params {AppState} state   The state of the app\n * @param  {Tool}     tools   Available tools to perform a task\n */\nasync function run(payload, state, tools) {\n  try {\n    // initializing\n    if (!state.db) {\n      const { reason, hex } = JSON.parse(await tools.parseHex({message: payload}));\n\n      // validate hex\n      if (hex === null) tools.reply('No hexadecimal value detected. Please try again.');\n      else {\n        const int_repr = parseInt(hex) / 1e7;\n\n        if (int_repr > EPOCH_EARLIEST && int_repr < EPOCH_LATEST) {\n          state.db = '_' + hex;\n\n          // if valid hex, show database schema\n          const schemas = await getSchema(state.db);\n          \n          for (let i=0; i<schemas.length; i++) {\n            let resp_str = '';\n            const schema = schemas[i];\n            resp_str += '### ' + (i+1) + ') ' + schema[0] + '\\n----------\\n'\n            for (let j=0; j<schema[1].length; j++) {\n              resp_str += '- ' + schema[1][j] + '\\n'\n            }\n            resp_str += '\\n';\n            const tab_context = `There is a table named \"${schema[0]}\", with columns ${schema[1].join(\", \")}\\n`;\n            resp_str += tab_context;\n            state.context += tab_context;\n            tools.reply(resp_str)\n          }\n          \n          tools.reply('Now, please provide context on what this database is about, and what the columns represent. The more detailed your desciption, the more data insights I can provide.')\n        } else {\n          tools.reply('Invalid hex value. Please try again.');\n        }\n      }\n      return;\n    }\n\n    if (!state.desc) {\n      state.desc = true;\n      tools.reply('Thank you for providing the context.')\n      tools.reply('Please ask a question about your database');\n      state.context += payload;\n      return;\n    }\n    const { reason, query_str } = JSON.parse(await tools.generateSQLQuery({question: payload, context: state.context}));\n    const data = await runQuery(state.db, query_str)\n\n    tools.reply(`# **Query:**\\n\\n${query_str}\\n\\n# **Reason**\\n\\n${reason}\\n\\n# **Query result**\\n\\n${JSON.stringify(data, null, 2)}`)\n    tools.reply('What other question do you have regarding your database?');\n  } catch (e) {\n    tools.reply(`Something unexpected happened. Try asking another question! ${e}`);\n  }\n}\n\n/** Startup.\n * @param {AppState} state The state of the app\n * @param {Tool}     tools Available tools to perform a task\n */\nasync function startup(state, tools) {\n  state.db = null;\n  state.desc = null;\n  state.context = '';\n  tools.reply(\"To begin, enter the hex value that was provided when you uploaded your data file. The hex value represents your database name. The hex value should start with \\\"0x\\\"\");\n}\n","llmFunctions":[{"functionName":"parseHex","description":"Parse a hexadecimal value from the users' message. The value should start with \"0x\", followed by a sequence of hexadecimal values","arguments":["message"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"Your job is to detect a hexadecimal value from the message. \nThe hexadecimal value must begin with a \"0x\" prefix, followed by a sequence of hexadecimal digits.\n\nThis hexadecimal value could possibly be embedded somewhere within the statement, or the statement could just entirely be a hexadecimal value on its own.\n\nYou have to think of the answer as good as you can. If you still can't find the hexadecimal value, just treat it as null.\n\nReply with the format below in JSON: ###\n{\n  \"reason\": \"\",  // a string describing why you choose the number\n  \"hex\": \"\" // hexadecimal value detected. Could be null value if no hex value found\n}\n###"},{"role":"user","content":"{{message}}"}],"stream":false,"parameters":{"maxResponse":200,"temperature":0,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"generateSQLQuery","description":"Generate a SQL query string from the user's question.","arguments":["question","context"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"Your job is to generate a SQL query string to fetch the data needed to answer the given database-related question.\n\nThe context of the database and what the columns represent is provided.\n\nYou have to think, and answer as good as you can. If you still can't determine, just return an empty string.\n\nReply with the format below in JSON: ###\n{\n  \"reason\": \"\",  // a string describing why you wrote this SQL query string\n  \"query_str\": \"\" // the SQL query string that fetches all the data required to answer the question. Give an empty string if you are unable to think of a suitable query.\n}\n###"},{"role":"user","content":"Question: {{question}} \nContext: {{context}}"}],"stream":false,"parameters":{"maxResponse":200,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"analyzeData","description":"The user is asking a data-related question. An SQL query has been executed to fetch the data needed to answer the user's question. The result of the SQL query is provided, along with the SQL query string itself. Your job is to come up with an answer to the user's question based on the SQL data.","arguments":["question","data"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"The user is asking a data-related question. An SQL query has been executed to fetch the data needed to answer the user's question. \nThe result of the SQL query is provided as a list of records, where each record is a nested list of values. \nYour job is to come up with an answer to the user's question based on the data from the SQL query.\nReply with the format below in JSON: ###\n{\n  \"answer\": \"\",  // a string containing your answer to the question based on the SQL data provided\n  \"analysisReason\": \"\",  // a string describing how you arrived at this analysis\n}\n###"},{"role":"user","content":"Question: {{question}}\nData: {{data}}"}],"stream":false,"parameters":{"maxResponse":300,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]}]}